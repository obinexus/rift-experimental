/*
 * rift/include/rift/cli/commands.h
 * RIFT CLI Commands Framework Header
 * OBINexus Computing Framework - AEGIS Methodology
 * Technical Lead: Nnamdi Michael Okpala
 */

#ifndef RIFT_CLI_COMMANDS_H
#define RIFT_CLI_COMMANDS_H

#include "rift/core/common.h"
#include <stdio.h>
#include <stddef.h>

#ifdef __cplusplus
extern "C" {
#endif

// AEGIS CLI Framework Version
#define RIFT_CLI_COMMANDS_VERSION_MAJOR 1
#define RIFT_CLI_COMMANDS_VERSION_MINOR 0
#define RIFT_CLI_COMMANDS_VERSION_PATCH 0

// Command Result Codes
#define RIFT_CLI_SUCCESS 0
#define RIFT_CLI_ERROR_INVALID_ARGS -1
#define RIFT_CLI_ERROR_FILE_NOT_FOUND -2
#define RIFT_CLI_ERROR_EXECUTION_FAILED -3
#define RIFT_CLI_ERROR_INSUFFICIENT_MEMORY -4
#define RIFT_CLI_ERROR_PERMISSION_DENIED -5

// CLI Command Function Signature
typedef int (*rift_cli_command_func_t)(int argc, char* argv[]);

// Command Registration Structure
typedef struct {
    const char* name;
    const char* description;
    const char* usage;
    rift_cli_command_func_t handler;
    bool requires_input_file;
    bool requires_output_file;
    bool supports_verbose;
} rift_cli_command_t;

/*
 * Core CLI Command Functions
 * These functions implement the individual RIFT pipeline stage commands
 */

/**
 * rift_cli_cmd_tokenize - Tokenization command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Executes the tokenization stage of the RIFT pipeline.
 * Processes input source code and generates token stream output.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_tokenize(int argc, char* argv[]);

/**
 * rift_cli_cmd_parse - Parser command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Executes the parsing stage to generate Abstract Syntax Tree.
 * Takes token stream input and produces AST output.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_parse(int argc, char* argv[]);

/**
 * rift_cli_cmd_analyze - Semantic analysis command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Performs semantic analysis on AST to generate typed AST.
 * Implements type checking and symbol resolution.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_analyze(int argc, char* argv[]);

/**
 * rift_cli_cmd_validate - Validation command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Validates AST against governance policies and constraints.
 * Ensures AEGIS compliance throughout the pipeline.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_validate(int argc, char* argv[]);

/**
 * rift_cli_cmd_generate - Code generation command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Generates bytecode from validated AST.
 * Implements optimization passes and code generation.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_generate(int argc, char* argv[]);

/**
 * rift_cli_cmd_verify - Verification command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Verifies generated bytecode for correctness and security.
 * Implements bytecode validation and integrity checks.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_verify(int argc, char* argv[]);

/**
 * rift_cli_cmd_emit - Emission command implementation
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Emits final executable code from verified bytecode.
 * Handles target-specific code generation and optimization.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_emit(int argc, char* argv[]);

/**
 * rift_cli_cmd_compile - Full compilation pipeline command
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Executes the complete RIFT compilation pipeline.
 * Orchestrates all stages from tokenization to emission.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_compile(int argc, char* argv[]);

/**
 * rift_cli_cmd_governance - Governance operations command
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Handles governance-related operations and validation.
 * Implements AEGIS policy management and compliance checking.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_cmd_governance(int argc, char* argv[]);

/*
 * Command Registration and Management Functions
 */

/**
 * rift_cli_register_commands - Register all CLI commands
 * 
 * Initializes the command registry with all available RIFT commands.
 * Must be called before command execution.
 * 
 * Returns: RIFT_SUCCESS on success, error code on failure
 */
int rift_cli_register_commands(void);

/**
 * rift_cli_find_command - Find command by name
 * @command_name: Name of command to find
 * 
 * Locates a registered command by its name.
 * 
 * Returns: Pointer to command structure, or NULL if not found
 */
const rift_cli_command_t* rift_cli_find_command(const char* command_name);

/**
 * rift_cli_execute_command - Execute a command by name
 * @command_name: Name of command to execute
 * @argc: Argument count
 * @argv: Argument vector
 * 
 * Executes the specified command with given arguments.
 * 
 * Returns: Command result code
 */
int rift_cli_execute_command(const char* command_name, int argc, char* argv[]);

/**
 * rift_cli_list_commands - List all available commands
 * @output: File pointer for output (stdout, stderr, etc.)
 * 
 * Prints a formatted list of all registered commands with descriptions.
 */
void rift_cli_list_commands(FILE* output);

/*
 * Utility Functions for Command Implementation
 */

/**
 * rift_cli_parse_common_options - Parse common CLI options
 * @argc: Argument count
 * @argv: Argument vector
 * @input_file: Pointer to store input file path
 * @output_file: Pointer to store output file path
 * @verbose: Pointer to store verbose flag
 * 
 * Parses common options like input file, output file, verbose mode.
 * 
 * Returns: Number of arguments consumed, or negative error code
 */
int rift_cli_parse_common_options(int argc, char* argv[], 
                                 char** input_file, char** output_file, 
                                 bool* verbose);

/**
 * rift_cli_validate_input_file - Validate input file accessibility
 * @filename: Input file path to validate
 * 
 * Checks if input file exists and is readable.
 * 
 * Returns: RIFT_CLI_SUCCESS if valid, error code otherwise
 */
int rift_cli_validate_input_file(const char* filename);

/**
 * rift_cli_validate_output_file - Validate output file writability
 * @filename: Output file path to validate
 * 
 * Checks if output file can be created or written to.
 * 
 * Returns: RIFT_CLI_SUCCESS if valid, error code otherwise
 */
int rift_cli_validate_output_file(const char* filename);

/**
 * rift_cli_print_usage - Print command usage information
 * @command: Command structure containing usage information
 * @output: File pointer for output
 * 
 * Prints formatted usage information for a command.
 */
void rift_cli_print_usage(const rift_cli_command_t* command, FILE* output);

/**
 * rift_cli_print_error - Print formatted error message
 * @command_name: Name of command that generated error
 * @error_code: Error code to display
 * @additional_message: Additional error context (optional)
 * 
 * Prints standardized error message format.
 */
void rift_cli_print_error(const char* command_name, int error_code, 
                         const char* additional_message);

/*
 * Pipeline Orchestration Functions
 */

/**
 * rift_cli_pipeline_validate_stage_input - Validate pipeline stage input
 * @stage_number: Pipeline stage number (0-6)
 * @input_data: Input data to validate
 * @input_size: Size of input data
 * 
 * Validates that input data is appropriate for the specified pipeline stage.
 * 
 * Returns: RIFT_CLI_SUCCESS if valid, error code otherwise
 */
int rift_cli_pipeline_validate_stage_input(int stage_number, 
                                          const void* input_data, 
                                          size_t input_size);

/**
 * rift_cli_pipeline_execute_stage - Execute individual pipeline stage
 * @stage_number: Pipeline stage number (0-6)
 * @input_file: Input file path
 * @output_file: Output file path
 * @options: Stage-specific options (optional)
 * 
 * Executes a specific pipeline stage with given input/output.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_pipeline_execute_stage(int stage_number, 
                                   const char* input_file, 
                                   const char* output_file,
                                   const char* options);

/**
 * rift_cli_pipeline_execute_full - Execute complete pipeline
 * @input_file: Initial input file (source code)
 * @output_file: Final output file (executable)
 * @intermediate_dir: Directory for intermediate files
 * @options: Pipeline options
 * 
 * Executes the complete RIFT compilation pipeline from source to executable.
 * 
 * Returns: RIFT_CLI_SUCCESS on success, error code on failure
 */
int rift_cli_pipeline_execute_full(const char* input_file,
                                  const char* output_file,
                                  const char* intermediate_dir,
                                  const char* options);

/*
 * Version and Information Functions
 */

/**
 * rift_cli_get_version - Get CLI framework version
 * @major: Pointer to store major version
 * @minor: Pointer to store minor version
 * @patch: Pointer to store patch version
 */
void rift_cli_get_version(int* major, int* minor, int* patch);

/**
 * rift_cli_print_version_info - Print version and build information
 * @output: File pointer for output
 * 
 * Prints comprehensive version and build information.
 */
void rift_cli_print_version_info(FILE* output);

#ifdef __cplusplus
}
#endif

#endif /* RIFT_CLI_COMMANDS_H */