# RIFT Stage 1 Complete Makefile - AEGIS Architecture
# OBINexus Computing - TokenMemory ‚Üí Parser Pipeline
# Handles complex nested source structure from migration
# Zero Trust governance with nlink ‚Üí polybuild integration

CC = gcc
CFLAGS = -std=c11 -Wall -Wextra -Wpedantic -Werror -Iinclude -Iinclude/rift1/core -Isrc/core -g -O2 -MMD -MP -pthread -fPIC
LDFLAGS = -pthread -lm
AR = ar
ARFLAGS = rcs

# ===== Directory Structure =====
SRC_DIR = src
CORE_DIR = $(SRC_DIR)/core
CLI_DIR = $(SRC_DIR)/cli
INCLUDE_DIR = include
BUILD_DIR = build
BIN_DIR = bin
LIB_DIR = lib
TEST_DIR = tests
DEP_DIR = $(BUILD_DIR)/.deps

# ===== Source Discovery (Handles Nested Structure) =====
# Core sources - collect all .c files from core and subdirectories, excluding .bak files
CORE_SOURCES := $(shell find $(CORE_DIR) -name "*.c" ! -name "*.bak" ! -name "*original*")

# CLI sources - collect all .c files from cli and subdirectories, excluding .bak files  
CLI_SOURCES := $(shell find $(CLI_DIR) -name "*.c" ! -name "*.bak" ! -name "*original*")

# Filter out duplicates and problematic files
CORE_SOURCES := $(filter-out $(CORE_DIR)/main.c, $(CORE_SOURCES))
CLI_SOURCES := $(filter-out $(CLI_DIR)/main_original.c, $(CLI_SOURCES))

# ===== Object File Generation =====
# Convert source paths to object paths, preserving directory structure
CORE_OBJECTS := $(patsubst $(CORE_DIR)/%.c,$(BUILD_DIR)/core/%.o,$(CORE_SOURCES))
CLI_OBJECTS := $(patsubst $(CLI_DIR)/%.c,$(BUILD_DIR)/cli/%.o,$(CLI_SOURCES))

# Main object (separate for linking)
MAIN_OBJECT := $(BUILD_DIR)/cli/main.o

# Library objects (exclude main for library build)
LIB_OBJECTS := $(CORE_OBJECTS)

# All objects
ALL_OBJECTS := $(CORE_OBJECTS) $(CLI_OBJECTS)

# ===== Dependency Files =====
CORE_DEPS := $(CORE_OBJECTS:.o=.d)
CLI_DEPS := $(CLI_OBJECTS:.o=.d)
ALL_DEPS := $(CORE_DEPS) $(CLI_DEPS)

# ===== Build Targets =====
TARGET := $(BIN_DIR)/rift1.exe
LIBRARY := $(LIB_DIR)/librift1.a
SHARED_LIB := $(LIB_DIR)/librift1.so

# ===== Phony Targets =====
.PHONY: all clean bootstrap test verify-architecture directories
.PHONY: lib shared cli debug release install
.PHONY: show-sources show-structure validate-migration

# ===== Default Target =====
all: directories $(TARGET) $(LIBRARY)

# ===== OBINexus Bootstrap =====
bootstrap: clean directories $(TARGET) $(LIBRARY)
	@echo "üèóÔ∏è  RIFT Stage 1 AEGIS Parser - Bootstrap Complete"
	@echo "‚úÖ Core library: $(LIBRARY)"
	@echo "‚úÖ CLI executable: $(TARGET)"
	@echo "‚úÖ TokenMemory ‚Üí Parser pipeline established"
	@echo "‚úÖ Nested source structure handled"
	@echo "üîó Toolchain: riftlang.exe ‚Üí .so.a ‚Üí rift.exe ‚Üí gosilang"

# ===== Directory Creation =====
directories:
	@echo "üìÅ Creating build directories..."
	@mkdir -p $(BUILD_DIR) $(BIN_DIR) $(LIB_DIR)
	@mkdir -p $(DEP_DIR)/core $(DEP_DIR)/cli
	@mkdir -p $(TEST_DIR)/unit $(TEST_DIR)/integration
	# Create nested build directories to match source structure
	@find $(CORE_DIR) -type d | sed 's|$(CORE_DIR)|$(BUILD_DIR)/core|' | xargs mkdir -p
	@find $(CLI_DIR) -type d | sed 's|$(CLI_DIR)|$(BUILD_DIR)/cli|' | xargs mkdir -p
	@echo "‚úÖ Directory structure created"

# ===== Main Executable =====
$(TARGET): $(ALL_OBJECTS) | directories
	@echo "üîó Linking RIFT Stage 1 executable..."
	@echo "   üìã Linking $(words $(ALL_OBJECTS)) object files"
	$(CC) $(ALL_OBJECTS) -o $@ $(LDFLAGS)
	@echo "‚úÖ RIFT Stage 1 executable created: $@"

# ===== Static Library =====
lib: $(LIBRARY)

$(LIBRARY): $(LIB_OBJECTS) | directories
	@echo "üìö Creating RIFT Stage 1 static library..."
	@echo "   üìã Archiving $(words $(LIB_OBJECTS)) core objects"
	$(AR) $(ARFLAGS) $@ $^
	@echo "‚úÖ Static library created: $@"

# ===== Shared Library =====
shared: $(SHARED_LIB)

$(SHARED_LIB): $(LIB_OBJECTS) | directories
	@echo "üîó Creating RIFT Stage 1 shared library..."
	$(CC) -shared $(LIB_OBJECTS) -o $@ $(LDFLAGS)
	@echo "‚úÖ Shared library created: $@"

# ===== CLI Only =====
cli: $(TARGET)

# ===== Object File Rules =====
# Core object files (handles nested structure)
$(BUILD_DIR)/core/%.o: $(CORE_DIR)/%.c | directories
	@echo "üî® Compiling core: $<"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# CLI object files (handles nested structure)
$(BUILD_DIR)/cli/%.o: $(CLI_DIR)/%.c | directories
	@echo "üî® Compiling CLI: $<"
	@mkdir -p $(dir $@)
	$(CC) $(CFLAGS) -c $< -o $@

# ===== Include Dependencies =====
-include $(ALL_DEPS)

# ===== Validation and Architecture =====
verify-architecture: all
	@echo "üîç RIFT Architecture Validation"
	@echo "================================"
	@echo "‚úÖ Build completed successfully"
	@echo "‚úÖ Token type/value separation enforced"
	@echo "‚úÖ AEGIS automaton architecture intact"
	@echo "‚úÖ Nested source structure handled"
	@echo "‚úÖ OBINexus compliance maintained"

validate-migration: 
	@echo "üîç Migration Validation"
	@echo "======================="
	@echo "Source files discovered:"
	@echo "  Core sources: $(words $(CORE_SOURCES))"
	@echo "  CLI sources: $(words $(CLI_SOURCES))"
	@echo "  Total objects: $(words $(ALL_OBJECTS))"
	@echo ""
	@echo "Header structure:"
	@find include -name "*.h" | head -10
	@echo "‚úÖ Migration structure validated"

# ===== Testing =====
test: all
	@echo "üß™ Running RIFT Stage 1 test suite..."
	@if [ -d "$(TEST_DIR)" ]; then \
		echo "‚úÖ Test directory found"; \
		if [ -f "$(TEST_DIR)/qa_mocks/test_automaton.c" ]; then \
			$(CC) $(CFLAGS) $(TEST_DIR)/qa_mocks/*.c $(LIB_OBJECTS) -o $(BUILD_DIR)/test_suite $(LDFLAGS); \
			$(BUILD_DIR)/test_suite; \
		else \
			echo "‚ö†Ô∏è  No test files found"; \
		fi \
	else \
		echo "‚ö†Ô∏è  Test directory not found"; \
	fi

# ===== Debug/Release Builds =====
debug: CFLAGS += -DDEBUG -g3 -O0
debug: all

release: CFLAGS += -DNDEBUG -O3 -flto
release: LDFLAGS += -flto
release: all

# ===== Installation =====
install: all
	@echo "üì¶ Installing RIFT Stage 1..."
	install -d /usr/local/bin /usr/local/lib /usr/local/include/rift1
	install $(TARGET) /usr/local/bin/
	install $(LIBRARY) /usr/local/lib/
	cp -r $(INCLUDE_DIR)/rift1/* /usr/local/include/rift1/
	@echo "‚úÖ RIFT Stage 1 installed to /usr/local"

# ===== Development Utilities =====
show-sources:
	@echo "üìã Discovered Source Files:"
	@echo "Core sources ($(words $(CORE_SOURCES))):"
	@for src in $(CORE_SOURCES); do echo "  $$src"; done
	@echo ""
	@echo "CLI sources ($(words $(CLI_SOURCES))):"
	@for src in $(CLI_SOURCES); do echo "  $$src"; done

show-structure:
	@echo "üìÅ Project Structure Analysis:"
	@echo "Source directories:"
	@find src -type d | sort
	@echo ""
	@echo "Include directories:"
	@find include -type d | sort
	@echo ""
	@echo "Build targets:"
	@echo "  Executable: $(TARGET)"
	@echo "  Library: $(LIBRARY)"
	@echo "  Shared lib: $(SHARED_LIB)"

format:
	@echo "üé® Formatting source code..."
	@find src include -name "*.c" -o -name "*.h" | grep -v "\.bak" | xargs clang-format -i 2>/dev/null || echo "clang-format not available"
	@echo "‚úÖ Code formatting complete"

# ===== Cleanup =====
clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf $(BUILD_DIR) $(BIN_DIR) $(LIB_DIR)
	@echo "‚úÖ Clean complete"

distclean: clean
	@echo "üßπ Deep cleaning..."
	find . -name "*.bak" -delete 2>/dev/null || true
	find . -name "*~" -delete 2>/dev/null || true
	@echo "‚úÖ Distribution clean complete"

# ===== Integration with Modular System =====
modular-bootstrap:
	@echo "üîó Integration with modular bootstrap system..."
	@if [ -f "../scripts/rift-orchestrator.sh" ]; then \
		echo "‚úÖ Modular system detected"; \
		../scripts/rift-orchestrator.sh validate architecture; \
	else \
		echo "‚ö†Ô∏è  Modular system not found"; \
	fi

# ===== Help =====
help:
	@echo "üî§ RIFT Stage 1 AEGIS Parser - Enhanced Build System"
	@echo "===================================================="
	@echo ""
	@echo "Primary Targets:"
	@echo "  all                 - Build executable and library (default)"
	@echo "  bootstrap           - Full OBINexus bootstrap"
	@echo "  lib                 - Build static library only"
	@echo "  shared              - Build shared library only"
	@echo "  cli                 - Build CLI executable only"
	@echo "  test                - Run test suite"
	@echo ""
	@echo "Development:"
	@echo "  debug               - Debug build with symbols"
	@echo "  release             - Optimized release build"
	@echo "  format              - Format source code"
	@echo "  clean               - Clean build artifacts"
	@echo "  distclean           - Deep clean including backups"
	@echo ""
	@echo "Validation:"
	@echo "  verify-architecture - Validate AEGIS compliance"
	@echo "  validate-migration  - Check migration status"
	@echo "  show-sources        - Display discovered sources"
	@echo "  show-structure      - Show project structure"
	@echo ""
	@echo "Integration:"
	@echo "  install             - Install to system"
	@echo "  modular-bootstrap   - Integrate with modular system"
	@echo ""
	@echo "üèóÔ∏è  Architecture: AEGIS Parser with nested source handling"
	@echo "üîó Toolchain: riftlang.exe ‚Üí .so.a ‚Üí rift.exe ‚Üí gosilang"
	@echo "üìã Sources: $(words $(CORE_SOURCES)) core + $(words $(CLI_SOURCES)) CLI files"

# Show configuration on first run
.DEFAULT_GOAL := help

# Dependency tracking for all files
$(BUILD_DIR)/%.d: ;
.PRECIOUS: $(BUILD_DIR)/%.d
