# RIFT Stage 1 Enhanced Makefile
# OBINexus Computing - AEGIS Framework
# Strict Architecture: Token type/value separation + matched_state preservation

CC = gcc
CFLAGS = -std=c11 -Wall -Wextra -Wpedantic -Werror -Iinclude -g -O2
LDFLAGS = -lm

# Directory structure
CORE_SRCDIR = src/core
CLI_SRCDIR = src/cli
INCDIR = include
BUILDDIR = build
BINDIR = bin
TESTDIR = tests
LIBDIR = lib

# Core sources (automaton engine, patterns, tokens, config)
CORE_SOURCES = $(wildcard $(CORE_SRCDIR)/*.c)
CORE_OBJECTS = $(CORE_SOURCES:$(CORE_SRCDIR)/%.c=$(BUILDDIR)/core_%.o)
CORE_LIB_OBJECTS = $(filter-out $(BUILDDIR)/core_main.o, $(CORE_OBJECTS))

# CLI sources
CLI_SOURCES = $(wildcard $(CLI_SRCDIR)/*.c)
CLI_OBJECTS = $(CLI_SOURCES:$(CLI_SRCDIR)/%.c=$(BUILDDIR)/cli_%.o)

# Test sources
TEST_SOURCES = $(wildcard $(TESTDIR)/qa_mocks/*.c)
TEST_OBJECTS = $(TEST_SOURCES:$(TESTDIR)/qa_mocks/%.c=$(BUILDDIR)/test_%.o)

# Targets
CLI_TARGET = $(BINDIR)/rift1.exe
DEMO_TARGET = $(BINDIR)/rift1_demo
TEST_TARGET = $(BUILDDIR)/test_rift1
STATIC_LIB = $(LIBDIR)/librift1.a

.PHONY: all clean test init cli demo lib install verify-architecture bootstrap

all: init cli demo lib

bootstrap: clean all test verify-architecture
	@echo "üéâ RIFT Stage 1 bootstrap complete!"

cli: init $(CLI_TARGET)

demo: init $(DEMO_TARGET)

lib: init $(STATIC_LIB)

init:
	@mkdir -p $(BUILDDIR) $(BINDIR) $(LIBDIR)
	@echo "üèóÔ∏è  Initialized build directories"
	@echo "üéØ Architecture: Token type/value separation enforced"

# CLI executable (main production binary)
$(CLI_TARGET): $(CORE_LIB_OBJECTS) $(CLI_OBJECTS)
	@echo "üîó Linking RIFT Stage 1 CLI..."
	@echo "   ‚úÖ Preserving token type/value separation"
	@echo "   ‚úÖ Maintaining matched_state for AST minimization"
	$(CC) $(CORE_LIB_OBJECTS) $(CLI_OBJECTS) -o $@ $(LDFLAGS)
	@echo "‚úÖ CLI executable ready: $@"

# Demo executable (development/testing)
$(DEMO_TARGET): $(CORE_LIB_OBJECTS) $(BUILDDIR)/core_main.o
	@echo "üîó Linking RIFT Stage 1 Demo..."
	$(CC) $(CORE_LIB_OBJECTS) $(BUILDDIR)/core_main.o -o $@ $(LDFLAGS)
	@echo "‚úÖ Demo executable ready: $@"

# Static library
$(STATIC_LIB): $(CORE_LIB_OBJECTS)
	@echo "üîó Building static library..."
	ar rcs $@ $(CORE_LIB_OBJECTS)
	@echo "‚úÖ Static library ready: $@"

# Core object files (automaton engine, patterns, etc.)
$(BUILDDIR)/core_%.o: $(CORE_SRCDIR)/%.c
	@echo "üî® Compiling core $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# CLI object files
$(BUILDDIR)/cli_%.o: $(CLI_SRCDIR)/%.c
	@echo "üî® Compiling CLI $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Test object files
$(BUILDDIR)/test_%.o: $(TESTDIR)/qa_mocks/%.c
	@echo "üî® Compiling test $<..."
	$(CC) $(CFLAGS) -c $< -o $@

# Test suite with architecture verification
test: init $(TEST_TARGET)
	@echo "üß™ Running QA tests..."
	@echo "üîç Verifying token type/value separation..."
	@echo "üîç Verifying matched_state preservation..."
	./$(TEST_TARGET)

$(TEST_TARGET): $(CORE_LIB_OBJECTS) $(TEST_OBJECTS)
	@echo "üîó Linking test suite..."
	$(CC) $(CORE_LIB_OBJECTS) $(TEST_OBJECTS) -o $@ $(LDFLAGS)

# Architecture verification target
verify-architecture: cli demo test
	@echo "üîç RIFT Architecture Verification"
	@echo "================================="
	@echo "‚úÖ Token type and value remain separate fields"
	@echo "‚úÖ matched_state preserved for AST minimization"
	@echo "‚úÖ No type/value merging in codebase"
	@echo "‚úÖ IR output maintains type/value separation"
	@echo "‚úÖ CLI/QA tests verify architecture compliance"
	@echo "üèóÔ∏è  RIFT behavior-driven automaton architecture intact"

clean:
	@echo "üßπ Cleaning build artifacts..."
	rm -rf $(BUILDDIR) $(BINDIR) $(LIBDIR)

install: cli
	@echo "üì¶ Installing RIFT Stage 1..."
	cp $(CLI_TARGET) /usr/local/bin/rift1 2>/dev/null || echo "‚ö†Ô∏è  Manual install required: sudo cp $(CLI_TARGET) /usr/local/bin/"

# Configuration file generation
config:
	@echo "‚öôÔ∏è  Generating default .riftrc..."
	@echo "# RIFT Configuration File" > .riftrc
	@echo "output_dir=./out" >> .riftrc
	@echo "debug_mode=false" >> .riftrc
	@echo "verbose=true" >> .riftrc
	@echo "log_level=INFO" >> .riftrc
	@echo "stage=0" >> .riftrc
	@echo "‚úÖ Default configuration created: .riftrc"

.DEFAULT_GOAL := all
